name: Deploy iOS App and Web

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Analyze code
        run: flutter analyze --no-fatal-infos || echo "Analysis completed with warnings (non-fatal)"
        
      - name: Run tests
        run: flutter test

  build-web:
    name: Build and Deploy Web
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build web
        run: |
          echo "Flutter version info:"
          flutter --version
          echo "Building web app..."
          flutter build web --release --base-href /
          echo "Build completed successfully!"
        
      - name: Verify build output
        run: |
          echo "Checking build directory structure..."
          ls -la build/web/
          echo "Checking index.html content..."
          head -20 build/web/index.html
          echo "Checking main.dart.js exists and size..."
          ls -lh build/web/main.dart.js || echo "main.dart.js not found!"
          echo "Checking flutter_bootstrap.js..."
          ls -lh build/web/flutter_bootstrap.js || echo "flutter_bootstrap.js not found!"
        
      - name: Setup Node.js for Firebase
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Debug Firebase setup
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "Firebase CLI version:"
          firebase --version
          echo "Checking Firebase project access..."
          firebase projects:list --token "$FIREBASE_TOKEN" || echo "Failed to list projects"
          echo "Checking if project exists..."
          firebase use --token "$FIREBASE_TOKEN" "${{ secrets.FIREBASE_PROJECT_ID }}" || echo "Failed to use project"
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          echo "Deploying to Firebase Hosting..."
          firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
          echo "Deployment completed!"
          
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          echo "Testing deployed site..."
          curl -I https://www.asim.af || echo "Failed to reach deployment"
          echo "Checking if HTML content is served..."
          curl -s https://www.asim.af | head -20 || echo "Failed to get content"

  build-ios:
    name: Build and Deploy iOS
    needs: test
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install CocoaPods
        run: |
          cd ios
          sudo gem install cocoapods
          
          # Clean existing pods to ensure fresh install
          rm -rf Pods
          rm -f Podfile.lock
          
          # Install pods with updated deployment target
          pod install --repo-update
          
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
          
      - name: Install Provisioning Profile
        uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          
      - name: Configure Xcode for Automatic Signing
        run: |
          cd ios
          
          echo "=== Configuring Xcode for automatic signing ==="
          
          # List downloaded provisioning profiles
          echo "=== Available provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles directory"
          find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec sh -c 'echo "=== $1 ==="; security cms -D -i "$1" 2>/dev/null | grep -A 1 -B 1 "Name\|application-identifier" || echo "Failed to read profile"' _ {} \; || echo "No profiles found"
          
          # Ensure automatic signing is enabled and team ID is set
          sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' Runner.xcodeproj/project.pbxproj
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.IOS_TEAM_ID }}";/g' Runner.xcodeproj/project.pbxproj
          
          # Remove any manual provisioning profile specifiers that might exist
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' Runner.xcodeproj/project.pbxproj
          
          # Update ExportOptions.plist for automatic signing
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>destination</key>
              <string>upload</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>\${{ secrets.IOS_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF
          
          echo "✅ Xcode project configured for automatic signing"
          
          # Verify configuration
          echo "=== Verifying project configuration ==="
          grep -A 5 -B 5 "CODE_SIGN_STYLE.*Automatic" Runner.xcodeproj/project.pbxproj || echo "Warning: Automatic signing not found"
          grep -A 5 -B 5 "DEVELOPMENT_TEAM.*${{ secrets.IOS_TEAM_ID }}" Runner.xcodeproj/project.pbxproj || echo "Warning: Team ID not set"
          echo "=== ExportOptions.plist content ==="
          cat ExportOptions.plist
          
      - name: Build iOS App
        run: |
          flutter build ios --release --no-codesign
          
      - name: Verify signing configuration
        run: |
          cd ios
          
          echo "=== Verifying signing configuration ==="
          
          # Check available signing identities
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          
          # Check available provisioning profiles and find the right one
          echo "=== Analyzing downloaded provisioning profiles ==="
          PROFILE_NAME=""
          if [ -d ~/Library/MobileDevice/Provisioning\ Profiles/ ]; then
            for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
              if [ -f "$profile" ]; then
                echo "=== Processing profile: $(basename "$profile") ==="
                
                # Extract profile content
                PROFILE_CONTENT=$(security cms -D -i "$profile" 2>/dev/null)
                
                if [ $? -eq 0 ]; then
                  # Extract profile name and app ID
                  NAME=$(echo "$PROFILE_CONTENT" | plutil -extract Name xml1 -o - - 2>/dev/null | grep -o '<string>.*</string>' | sed 's/<[^>]*>//g')
                  APP_ID=$(echo "$PROFILE_CONTENT" | plutil -extract Entitlements.application-identifier xml1 -o - - 2>/dev/null | grep -o '<string>.*</string>' | sed 's/<[^>]*>//g')
                  
                  echo "Profile Name: $NAME"
                  echo "App ID: $APP_ID"
                  
                  # Check if this profile matches our bundle ID
                  if [[ "$APP_ID" == *"com.asim.asimPlatform"* ]]; then
                    PROFILE_NAME="$NAME"
                    echo "✅ Found matching profile for com.asim.asimPlatform: $PROFILE_NAME"
                  fi
                fi
              fi
            done
          fi
          
          if [ -z "$PROFILE_NAME" ]; then
            echo "❌ No matching provisioning profile found for com.asim.asimPlatform"
            echo "This might cause signing issues"
          else
            echo "✅ Will use profile: $PROFILE_NAME"
          fi
          
          # Verify project configuration
          echo "=== Project signing configuration ==="
          grep -A 10 -B 5 "CODE_SIGN_STYLE.*Automatic" Runner.xcodeproj/project.pbxproj || echo "❌ Automatic signing not configured"
          grep -A 5 "DEVELOPMENT_TEAM.*${{ secrets.IOS_TEAM_ID }}" Runner.xcodeproj/project.pbxproj || echo "❌ Development team not set"
          
      - name: Build and Archive with Xcode
        run: |
          cd ios
          
          echo "=== Starting Xcode build and archive ==="
          echo "Current directory: $(pwd)"
          echo "Available schemes:"
          xcodebuild -list -workspace Runner.xcworkspace
          
          echo "=== Building archive with automatic signing ==="
          set -e  # Exit on any error
          
          xcodebuild \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath Runner.xcarchive \
            archive \
            DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
            | tee build_log.txt
            
          # Check if archive was created successfully
          if [ ! -d "Runner.xcarchive" ]; then
            echo "❌ Archive creation failed"
            echo "=== Build log tail ==="
            tail -50 build_log.txt
            exit 1
          fi
          
          echo "✅ Archive created successfully"
          ls -la Runner.xcarchive/
            
      - name: Export IPA
        run: |
          cd ios
          
          echo "=== Exporting IPA ==="
          echo "ExportOptions.plist content:"
          cat ExportOptions.plist
          
          echo "=== Starting export ==="
          set -e  # Exit on any error
          
          xcodebuild \
            -exportArchive \
            -archivePath Runner.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist \
            | tee export_log.txt
            
          # Check if IPA was created successfully
          if [ ! -f "build/Runner.ipa" ]; then
            echo "❌ IPA export failed"
            echo "=== Export log tail ==="
            tail -50 export_log.txt
            echo "=== Build directory contents ==="
            ls -la build/ || echo "Build directory not found"
            exit 1
          fi
          
          echo "✅ IPA exported successfully"
          ls -la build/
          echo "IPA size: $(du -h build/Runner.ipa)"
            
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: ios/build/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
