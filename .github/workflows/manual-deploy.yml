name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'What to deploy'
        required: true
        default: 'web'
        type: choice
        options:
        - web
        - ios
        - both
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build web
        run: |
          echo "Flutter version info:"
          flutter --version
          echo "Building web app..."
          flutter build web --release --base-href /
          echo "Build completed successfully!"
        
      - name: Verify build output
        run: |
          echo "Checking build directory structure..."
          ls -la build/web/
          echo "Checking index.html content..."
          head -20 build/web/index.html
          echo "Checking main.dart.js exists and size..."
          ls -lh build/web/main.dart.js || echo "main.dart.js not found!"
          echo "Checking flutter_bootstrap.js..."
          ls -lh build/web/flutter_bootstrap.js || echo "flutter_bootstrap.js not found!"
        
      - name: Setup Node.js for Firebase
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID_STAGING }}"
          else
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
          fi

  deploy-ios:
    name: Deploy iOS App
    runs-on: macos-latest
    if: ${{ github.event.inputs.deploy_target == 'ios' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install CocoaPods
        run: |
          cd ios
          sudo gem install cocoapods
          pod install
          
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
          
      - name: Install Provisioning Profile
        uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          
      - name: Debug provisioning profiles
        run: |
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "Provisioning profiles directory not found"
          find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec sh -c 'echo "=== $1 ==="; security cms -D -i "$1" | plutil -p -' _ {} \; || echo "No provisioning profiles found"
          
      - name: Configure Xcode project for CI
        run: |
          cd ios
          
          echo "=== Configuring Xcode for manual signing ==="
          
          # Show detailed info about each profile
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            if [ -f "$profile" ]; then
              echo "=== $(basename "$profile") ==="
              security cms -D -i "$profile" 2>/dev/null | plutil -extract Name raw - 2>/dev/null || echo "Could not extract name"
              security cms -D -i "$profile" 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "Could not extract UUID" 
              security cms -D -i "$profile" 2>/dev/null | plutil -extract TeamIdentifier.0 raw - 2>/dev/null || echo "Could not extract team ID"
              echo ""
            fi
          done
          
          # Run our quick fix script that uses the exact UUIDs
          chmod +x quick_signing_fix.sh
          ./quick_signing_fix.sh
          
          # Create ExportOptions.plist with the correct provisioning profile UUID
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>destination</key>
              <string>upload</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.asim.asimPlatform</key>
                  <string>d1677fe0-db29-4970-937c-d44ec7067064</string>
              </dict>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF
          
          echo "âœ… Xcode project configured for manual signing"
          
      - name: Build iOS App
        run: |
          flutter build ios --release --no-codesign
          
      - name: Build and Archive with Xcode
        run: |
          cd ios
          
          # Configure automatic signing
          TEAM_ID="${{ secrets.IOS_TEAM_ID }}" ./github_actions_signing_fix.sh
          
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}"
            
      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath Runner.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist
            
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: ios/build/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
