name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'What to deploy'
        required: true
        default: 'web'
        type: choice
        options:
        - web
        - ios
        - both
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build web
        run: |
          echo "Flutter version info:"
          flutter --version
          echo "Building web app..."
          flutter build web --release --base-href /
          echo "Build completed successfully!"
        
      - name: Verify build output
        run: |
          echo "Checking build directory structure..."
          ls -la build/web/
          echo "Checking index.html content..."
          head -20 build/web/index.html
          echo "Checking main.dart.js exists and size..."
          ls -lh build/web/main.dart.js || echo "main.dart.js not found!"
          echo "Checking flutter_bootstrap.js..."
          ls -lh build/web/flutter_bootstrap.js || echo "flutter_bootstrap.js not found!"
        
      - name: Setup Node.js for Firebase
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID_STAGING }}"
          else
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
          fi

  deploy-ios:
    name: Deploy iOS App
    runs-on: macos-latest
    if: ${{ github.event.inputs.deploy_target == 'ios' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install CocoaPods
        run: |
          cd ios
          sudo gem install cocoapods
          
          # Clean existing pods to ensure fresh install
          rm -rf Pods
          rm -f Podfile.lock
          
          # Install pods with updated deployment target
          pod install --repo-update
          
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
          keychain: signing_temp
          create-keychain: true
          
      - name: Install Provisioning Profile
        uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          
      - name: Debug provisioning profiles
        run: |
          echo "=== Available signing identities ==="
          security find-identity -v -p codesigning
          
          echo "=== Checking certificate details ==="
          security find-identity -v -p codesigning | grep "Apple Distribution"
          
          echo "=== Available provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles directory"
          
          # Show detailed info about each profile
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            if [ -f "$profile" ]; then
              echo "=== $(basename "$profile") ==="
              security cms -D -i "$profile" 2>/dev/null | plutil -extract Name raw - 2>/dev/null || echo "Could not extract name"
              security cms -D -i "$profile" 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "Could not extract UUID" 
              security cms -D -i "$profile" 2>/dev/null | plutil -extract TeamIdentifier.0 raw - 2>/dev/null || echo "Could not extract team ID"
              echo ""
            fi
          done
          
      - name: Configure Xcode for Signing
        env:
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          cd ios
          
          echo "=== Configuring Xcode for automatic signing (to work with Pods) ==="
          chmod +x github_actions_signing_fix.sh
          ./github_actions_signing_fix.sh
          
          echo "✅ Xcode configured for GitHub Actions deployment"
          
      - name: Build iOS IPA with Flutter
        env:
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          cd ios
          
          echo "=== Configuring Xcode for automatic signing ==="
          chmod +x github_actions_signing_fix.sh
          ./github_actions_signing_fix.sh
          
          echo "=== Creating ExportOptions.plist ==="
          chmod +x create_export_options.sh
          ./create_export_options.sh
          
          echo "=== Available certificates ==="
          security find-identity -v -p codesigning
          
          cd ..
          
          echo "=== Building iOS IPA with Flutter ==="
          # Use Flutter to build and code sign the IPA
          # Flutter handles the Xcode build process internally and works better with automatic signing
          flutter build ipa --release \
            --export-options-plist ios/ExportOptions.plist
          
          # Check if IPA was created successfully
          if [ ! -f "build/ios/ipa/Runner.ipa" ]; then
            echo "❌ IPA build failed"
            echo "=== Checking build directory ==="
            ls -la build/ios/ || echo "ios build directory not found"
            ls -la build/ios/ipa/ || echo "ipa directory not found"
            exit 1
          fi
          
          echo "✅ IPA built successfully with Flutter"
          ls -la build/ios/ipa/
          echo "IPA size: $(du -h build/ios/ipa/Runner.ipa)"
          
          # Move IPA to expected location for upload step
          mkdir -p ios/build
          cp build/ios/ipa/Runner.ipa ios/build/Runner.ipa
            
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: ios/build/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
