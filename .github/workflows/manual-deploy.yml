name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'What to deploy'
        required: true
        default: 'web'
        type: choice
        options:
        - web
        - ios
        - both
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build web
        run: |
          echo "Flutter version info:"
          flutter --version
          echo "Building web app..."
          flutter build web --release --base-href /
          echo "Build completed successfully!"
        
      - name: Verify build output
        run: |
          echo "Checking build directory structure..."
          ls -la build/web/
          echo "Checking index.html content..."
          head -20 build/web/index.html
          echo "Checking main.dart.js exists and size..."
          ls -lh build/web/main.dart.js || echo "main.dart.js not found!"
          echo "Checking flutter_bootstrap.js..."
          ls -lh build/web/flutter_bootstrap.js || echo "flutter_bootstrap.js not found!"
        
      - name: Setup Node.js for Firebase
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID_STAGING }}"
          else
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
          fi

  deploy-ios:
    name: Deploy iOS App
    runs-on: macos-latest
    if: ${{ github.event.inputs.deploy_target == 'ios' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install CocoaPods
        run: |
          cd ios
          sudo gem install cocoapods
          
          # Clean existing pods to ensure fresh install
          rm -rf Pods
          rm -f Podfile.lock
          
          # Install pods with updated deployment target
          pod install --repo-update
          
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
          keychain: signing_temp
          create-keychain: true
          
      - name: Install Provisioning Profile
        uses: Apple-Actions/download-provisioning-profiles@v1
        with:
          bundle-id: ${{ secrets.IOS_BUNDLE_ID }}
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          
      - name: Debug provisioning profiles
        run: |
          echo "=== Available signing identities ==="
          security find-identity -v -p codesigning
          
          echo "=== Checking certificate details ==="
          security find-identity -v -p codesigning | grep "Apple Distribution"
          
          echo "=== Available provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles directory"
          
          # Show detailed info about each profile
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            if [ -f "$profile" ]; then
              echo "=== $(basename "$profile") ==="
              security cms -D -i "$profile" 2>/dev/null | plutil -extract Name raw - 2>/dev/null || echo "Could not extract name"
              security cms -D -i "$profile" 2>/dev/null | plutil -extract UUID raw - 2>/dev/null || echo "Could not extract UUID" 
              security cms -D -i "$profile" 2>/dev/null | plutil -extract TeamIdentifier.0 raw - 2>/dev/null || echo "Could not extract team ID"
              echo ""
            fi
          done
          
      - name: Configure Xcode for Signing
        env:
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
          PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        run: |
          cd ios
          
          echo "=== Configuring Xcode for signing ==="
          
          # Try manual signing first if provisioning profile name is provided
          if [ -n "$PROVISIONING_PROFILE_NAME" ]; then
            echo "=== Configuring for manual signing with profile: $PROVISIONING_PROFILE_NAME ==="
            chmod +x github_actions_manual_signing_fix.sh
            ./github_actions_manual_signing_fix.sh
            
            # Fix code signing identity for distribution
            echo "=== Fixing code signing identity for App Store distribution ==="
            sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "iPhone Developer";/"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "Apple Distribution";/g' Runner.xcodeproj/project.pbxproj
            
            echo "✅ Updated code signing identity to Apple Distribution"
            
            # Create ExportOptions.plist for manual signing
            cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>destination</key>
              <string>upload</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${{ secrets.IOS_BUNDLE_ID }}</key>
                  <string>$PROVISIONING_PROFILE_NAME</string>
              </dict>
          </dict>
          </plist>
          EOF
            
            echo "✅ Configured for manual signing"
          else
            echo "=== Configuring for automatic signing ==="
            # Run our proven GitHub Actions signing fix for automatic signing
            chmod +x github_actions_signing_fix.sh
            ./github_actions_signing_fix.sh
            
            # Fix code signing identity for distribution
            echo "=== Fixing code signing identity for App Store distribution ==="
            sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "iPhone Developer";/"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "Apple Distribution";/g' Runner.xcodeproj/project.pbxproj
            
            echo "✅ Updated code signing identity to Apple Distribution"
            
            # Create ExportOptions.plist for automatic signing
            cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>destination</key>
              <string>upload</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>teamID</key>
              <string>${{ secrets.IOS_TEAM_ID }}</string>
          </dict>
          </plist>
          EOF
            
            echo "✅ Configured for automatic signing"
          fi
          
      - name: Build iOS App
        run: |
          flutter build ios --release --no-codesign
          
      - name: Build and Archive with Xcode
        env:
          PROVISIONING_PROFILE_NAME: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
        run: |
          cd ios
          
          echo "=== Starting Xcode build and archive ==="
          echo "Current directory: $(pwd)"
          echo "Available schemes:"
          xcodebuild -list -workspace Runner.xcworkspace
          
          echo "=== Available certificates ==="
          security find-identity -v -p codesigning
          
          echo "=== Building archive ==="
          set -e  # Exit on any error
          
          # Choose signing approach based on whether provisioning profile name is provided
          if [ -n "$PROVISIONING_PROFILE_NAME" ]; then
            echo "=== Building with manual signing ==="
            xcodebuild \
              -workspace Runner.xcworkspace \
              -scheme Runner \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath Runner.xcarchive \
              archive \
              CODE_SIGN_STYLE=Manual \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
              PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_NAME" \
              | tee build_log.txt
          else
            echo "=== Building with automatic signing ==="
            xcodebuild \
              -workspace Runner.xcworkspace \
              -scheme Runner \
              -configuration Release \
              -destination generic/platform=iOS \
              -archivePath Runner.xcarchive \
              archive \
              -allowProvisioningUpdates \
              CODE_SIGN_STYLE=Automatic \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              DEVELOPMENT_TEAM="${{ secrets.IOS_TEAM_ID }}" \
              | tee build_log.txt
          fi
            
          # Check if archive was created successfully
          if [ ! -d "Runner.xcarchive" ]; then
            echo "❌ Archive creation failed"
            echo "=== Build log tail ==="
            tail -50 build_log.txt
            exit 1
          fi
          
          echo "✅ Archive created successfully"
          ls -la Runner.xcarchive/
            
      - name: Export IPA
        run: |
          cd ios
          
          echo "=== Exporting IPA ==="
          echo "ExportOptions.plist content:"
          cat ExportOptions.plist
          
          echo "=== Starting export ==="
          set -e  # Exit on any error
          
          xcodebuild \
            -exportArchive \
            -archivePath Runner.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist ExportOptions.plist \
            | tee export_log.txt
            
          # Check if IPA was created successfully
          if [ ! -f "build/Runner.ipa" ]; then
            echo "❌ IPA export failed"
            echo "=== Export log tail ==="
            tail -50 export_log.txt
            echo "=== Build directory contents ==="
            ls -la build/ || echo "Build directory not found"
            exit 1
          fi
          
          echo "✅ IPA exported successfully"
          ls -la build/
          echo "IPA size: $(du -h build/Runner.ipa)"
            
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: ios/build/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
