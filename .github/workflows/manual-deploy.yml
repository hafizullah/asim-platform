name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'What to deploy'
        required: true
        default: 'web'
        type: choice
        options:
        - web
        - ios
        - both
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_target == 'web' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build web
        run: |
          echo "Flutter version info:"
          flutter --version
          echo "Building web app..."
          flutter build web --release --base-href /
          echo "Build completed successfully!"
        
      - name: Verify build output
        run: |
          echo "Checking build directory structure..."
          ls -la build/web/
          echo "Checking index.html content..."
          head -20 build/web/index.html
          echo "Checking main.dart.js exists and size..."
          ls -lh build/web/main.dart.js || echo "main.dart.js not found!"
          echo "Checking flutter_bootstrap.js..."
          ls -lh build/web/flutter_bootstrap.js || echo "flutter_bootstrap.js not found!"
        
      - name: Setup Node.js for Firebase
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID_STAGING }}"
          else
            firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "${{ secrets.FIREBASE_PROJECT_ID }}"
          fi

  deploy-ios:
    name: Deploy iOS App
    runs-on: macos-latest
    if: ${{ github.event.inputs.deploy_target == 'ios' || github.event.inputs.deploy_target == 'both' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install CocoaPods
        run: |
          cd ios
          sudo gem install cocoapods
          
          # Clean existing pods to ensure fresh install
          rm -rf Pods
          rm -f Podfile.lock
          
          # Install pods with updated deployment target
          pod install --repo-update
          
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DIST_SIGNING_KEY }}
          p12-password: ${{ secrets.IOS_DIST_SIGNING_KEY_PASSWORD }}
          keychain: signing_temp
          create-keychain: true
          
      - name: Download and Install Provisioning Profiles
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          # Create provisioning profiles directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Decode and install the provisioning profile
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/AsimPlatform.mobileprovision
          
          echo "=== Installed provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Show profile details
          if command -v security &> /dev/null; then
            echo "=== Provisioning profile details ==="
            security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/AsimPlatform.mobileprovision
          fi
          
      - name: Debug signing setup
        run: |
          echo "=== Available signing identities ==="
          security find-identity -v -p codesigning
          
          echo "=== Available provisioning profiles ==="
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ || echo "No provisioning profiles directory (will be created automatically)"
          
      - name: Configure Xcode for Manual Signing with Provisioning Profile
        env:
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          cd ios
          
          echo "=== Configuring Xcode for manual signing with explicit provisioning profile ==="
          
          # Get the UUID of the installed provisioning profile
          PROFILE_UUID=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/AsimPlatform.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          echo "Provisioning Profile UUID: $PROFILE_UUID"
          
          # Configure manual signing in Xcode project
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = \"[^\"]*\";/DEVELOPMENT_TEAM = \"$TEAM_ID\";/g" Runner.xcodeproj/project.pbxproj
          sed -i '' "s/DEVELOPMENT_TEAM = \"\";/DEVELOPMENT_TEAM = \"$TEAM_ID\";/g" Runner.xcodeproj/project.pbxproj
          
          # Set the correct code signing identity for distribution
          sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "iPhone Developer";/"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "Apple Distribution";/g' Runner.xcodeproj/project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Developer";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' Runner.xcodeproj/project.pbxproj
          
          # Add or update provisioning profile specifier
          if ! grep -q "PROVISIONING_PROFILE_SPECIFIER" Runner.xcodeproj/project.pbxproj; then
            echo "Adding provisioning profile specifier to project..."
            # Create a temporary file with the provisioning profile line
            echo "				PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\";" > /tmp/provision_line.txt
            # Insert after DEVELOPMENT_TEAM lines
            awk "/DEVELOPMENT_TEAM = \"$TEAM_ID\";/{print; print \"				PROVISIONING_PROFILE_SPECIFIER = \\\"$PROFILE_UUID\\\";\"; next}1" Runner.xcodeproj/project.pbxproj > /tmp/project_updated.pbxproj
            mv /tmp/project_updated.pbxproj Runner.xcodeproj/project.pbxproj
          else
            # Update existing provisioning profile specifier
            sed -i '' "s/PROVISIONING_PROFILE_SPECIFIER = \"[^\"]*\";/PROVISIONING_PROFILE_SPECIFIER = \"$PROFILE_UUID\";/g" Runner.xcodeproj/project.pbxproj
          fi
          
          echo "✅ Xcode configured for manual signing with provisioning profile"
          
          # Update ExportOptions.plist with the correct team ID
          sed -i '' "s/<string>368HV7DHRL<\/string>/<string>$TEAM_ID<\/string>/g" ExportOptions.plist
          
          echo "=== Updated ExportOptions.plist ==="
          cat ExportOptions.plist
          
      - name: Build and Release iOS App with Flutter
        env:
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          echo "=== Available certificates ==="
          security find-identity -v -p codesigning
          
          echo "=== Building iOS release with Flutter and xcodebuild ==="
          # Run flutter pub get to ensure dependencies are ready
          flutter packages get
          
          # Generate Flutter build files (without actually building)
          flutter build ios --release --no-codesign
          
          # Now build, archive and export with xcodebuild directly
          cd ios
          
          # Clean previous builds
          xcodebuild clean -workspace Runner.xcworkspace -scheme Runner
          
          # Build and archive (no need for -allowProvisioningUpdates with manual signing)
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/Runner.xcarchive \
            archive
          
          # Export the IPA using the export options
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist
          
          cd ..
          
          # Check if IPA was created successfully
          if [ ! -f "ios/build/*.ipa" ]; then
            echo "❌ IPA build failed"
            echo "=== Checking build directory ==="
            ls -la ios/build/ || echo "ios build directory not found"
            exit 1
          fi
          
          echo "✅ IPA built successfully with xcodebuild"
          ls -la ios/build/
          
          # Get the actual IPA filename (should be in ios/build/)
          IPA_FILE=$(ls ios/build/*.ipa | head -1)
          echo "IPA file: $IPA_FILE"
          echo "IPA size: $(du -h "$IPA_FILE")"
          
          # Move IPA to expected location for upload step
          cp "$IPA_FILE" ios/build/Runner.ipa
            
      - name: Upload to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: ios/build/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
